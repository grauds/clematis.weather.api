plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'groovy'

    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.4'

    id 'com.github.spotbugs' version '6.1.6'

    id "org.flywaydb.flyway" version "9.8.1"

    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
    id "org.asciidoctor.jvm.convert" version "4.0.4"
}

repositories {
    mavenCentral()
}

group = 'org.clematis'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExtensions
    implementation.exclude group: "org.slf4j", module: "slf4j-log4j12"
    implementation.exclude group: "org.slf4j", module: "slf4j-simple"
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation project(path: ':parser')

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    compileOnly (
        'org.projectlombok:lombok',
        'com.github.spotbugs:spotbugs:4.8.4',
        'com.google.code.findbugs:annotations:3.0.1u2',
        'org.apache.commons:commons-lang3',
        'commons-io:commons-io:2.16.1'
    )
    checkstyle "com.puppycrawl.tools:checkstyle:10.9.3"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "org.flywaydb:flyway-core:10.15.2"
    implementation "org.flywaydb:flyway-mysql:10.15.2"
    implementation "mysql:mysql-connector-java:8.0.33"
    implementation "org.modelmapper:modelmapper:3.2.0"

    implementation 'org.springdoc:springdoc-openapi-starter-common:2.8.13'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'

    // for groovy
    implementation "org.apache.groovy:groovy-all:4.0.28"
    implementation "org.spockframework:spock-core:2.3-groovy-4.0"
    implementation "org.apache.ivy:ivy:2.5.2"

    implementation 'org.glassfish.main.external:jmxremote_optional-repackaged:5.0'
    // to use regexp in logback.xml
    implementation 'org.codehaus.janino:janino:3.1.12'

    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly (
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2",
            "org.projectlombok:lombok"
    )

    testImplementation "org.apache.commons:commons-lang3:3.15.0"

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'

    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
}

ext {
    snippetsDir = file("${layout.buildDirectory.asFile.get()}/generated-snippets")
}

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.register('checkstyleReport') {
    doLast {
        if (file("${layout.buildDirectory.asFile.get()}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
            ant.xslt(in: "${layout.buildDirectory.asFile.get()}/reports/checkstyle/${project.ext.checkType}.xml",
                    style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                    out: "${layout.buildDirectory.asFile.get()}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
        }
    }
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/*Test*'
}

// ------------ Open API configuration  ---------

openApi {
    outputDir.set(file("docs"))
    outputFileName.set("swagger.json")
    waitTimeInSeconds.set(10)
}

// ------------ JaCoCo configuration  ---------

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}

// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
    sourceSets.main.java.srcDirs.forEach {
        outgoing.artifact(it)
    }
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}

// ------------ Spotbugs configuration  ---------
spotbugs {
    reportsDir = file("${layout.buildDirectory.asFile.get()}/reports/spotbugs/main/spotbugs.html")
    ignoreFailures = true
}

// ----------- Spring Rest Doc ------------------

asciidoctor {
    dependsOn test
    options doctype: 'book'
    attributes = [
            'source-highlighter': 'highlightjs',
            'imagesdir'         : './images',
            'toc'               : 'left',
            'toclevels'         : 3,
            'numbered'          : '',
            'icons'             : 'font',
            'setanchors'        : '',
            'idprefix'          : '',
            'idseparator'       : '-',
            'docinfo1'          : '',
            'safe-mode-unsafe'  : '',
            'allow-uri-read'    : '',
            'snippets'          : snippetsDir,
            linkattrs           : true,
            encoding            : 'utf-8'
    ]

    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    sourceDir 'src/docs/asciidocs'
    baseDir sourceDir
    sources {
        include 'api.adoc'
    }
}

// ----------- Packaging ------------------------

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

springBoot {
    buildInfo {
        properties {
            artifact = 'clematis-weather-api'
            version = project.version
            group = 'org.clematis.weather'
            name = 'Clematis Weather API'
        }
    }
}