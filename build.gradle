buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }
}

plugins {
    id "java"
    id "groovy"
    id "org.springframework.boot" version "2.7.18"
    id "io.spring.dependency-management" version "1.1.4"

    id "com.github.spotbugs" version "6.0.7"
   // id "org.asciidoctor.jvm.convert" version "3.1.0"
    id "jacoco"
    id "checkstyle"

    id "org.flywaydb.flyway" version "9.8.1"

    id "com.palantir.docker" version "0.36.0"
    id "com.palantir.docker-run" version "0.36.0"
    id "com.palantir.docker-compose" version "0.36.0"
}

group = 'org.clematis'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    implementation.exclude group: "org.slf4j", module: "slf4j-log4j12"
    implementation.exclude group: "org.slf4j", module: "slf4j-simple"
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(path: ':parser')

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//    annotationProcessor 'com.google.auto.service:auto-service:1.0.1'

    compileOnly (
            'org.projectlombok:lombok',
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2",
            "org.apache.commons:commons-lang3",
            "commons-io:commons-io:2.16.1",
    )
    checkstyle "com.puppycrawl.tools:checkstyle:10.9.3"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

   // implementation 'com.google.auto.service:auto-service:1.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "org.flywaydb:flyway-core:9.15.0"
    implementation "org.flywaydb:flyway-mysql:9.15.0"
    implementation "mysql:mysql-connector-java:8.0.33"

    implementation "org.springdoc:springdoc-openapi-ui:1.6.14"
    implementation "org.springdoc:springdoc-openapi-hateoas:1.6.14"
    implementation "org.springdoc:springdoc-openapi-data-rest:1.6.14"

    // for groovy
    implementation "org.codehaus.groovy:groovy-all:3.0.13"
    implementation "org.spockframework:spock-core:2.2-groovy-3.0"
    implementation "org.apache.ivy:ivy:2.5.2"

    implementation 'org.glassfish.main.external:jmxremote_optional-repackaged:5.0'

    implementation "org.modelmapper:modelmapper:3.1.1"

    // to use regexp in logback.xml
    implementation 'org.codehaus.janino:janino:3.1.6'

    testCompileOnly (
            "org.testcontainers:testcontainers:1.20.3",
            "org.testcontainers:junit-jupiter:1.20.3",
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2",
            "org.projectlombok:lombok",
            "org.junit.jupiter:junit-jupiter:5.6.2"
    )

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"

    testImplementation (
            "org.apache.commons:commons-lang3:3.15.0"
    )

    testImplementation platform("org.testcontainers:testcontainers-bom:1.20.3")
    testImplementation "org.testcontainers:mysql:1.20.3"

    testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

// ------------ Spotbugs configuration  ---------
spotbugsMain {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
    ignoreFailures = true
}

spotbugsTest {
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
    ignoreFailures = true
}

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.register('checkstyleReport') {
    doLast {
        if (file("${buildDir}/reports/checkstyle/${project.ext.checkType}.xml").exists()) {
            ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                    style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                    out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
        }
    }
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/*Test*'
}

// ------------ JaCoCo configuration  ---------
ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}

// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
    sourceSets.main.java.srcDirs.forEach {
        outgoing.artifact(it)
    }
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}

docker {
    name = "atroshin/${project.name}:${version}"
    dockerfile = file('Dockerfile')
    copySpec.from("${buildDir}").into("build")
    pull true
    noCache true
}

dockerCompose {
    dockerComposeFile file("${project.rootDir}/docker/docker-compose.yml")
}

dockerRun {
    name 'clematis.weather.api'
    image "atroshin/${project.name}:${version}"
    ports '18087:8080'
}

springBoot {
    buildInfo {
        properties {
            artifact = 'clematis-weather-api'
            version = project.version
            group = 'org.clematis.weather'
            name = 'Clematis Weather API'
        }
    }
}
